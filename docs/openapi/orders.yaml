openapi: 3.0.3
info:
  title: orders-service API
  version: 1.0.0
servers:
  - url: http://localhost:8083
    description: orders-service
security:
  - bearerAuth: []
paths:
  /api/v1/orders:
    post:
      tags: [Orders]
      summary: Create order (CUSTOMER)
      description: |
        Creates a new order with initial status PENDIENTE. Only customers can create orders.
        Business rules:
        - All dishes must belong to the same restaurant
        - Customer must not have another active order (PENDIENTE, EN_PREPARACION, LISTO)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '409':
          description: Conflict (active order exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags: [Orders]
      summary: List orders by status and restaurant (EMPLOYEE/OWNER)
      parameters:
        - in: query
          name: status
          schema: { type: string, enum: [PENDIENTE, EN_PREPARACION, LISTO, ENTREGADO, CANCELADO] }
        - in: query
          name: restaurantId
          schema: { type: integer, format: int64 }
        - in: query
          name: page
          schema: { type: integer, default: 0 }
        - in: query
          name: size
          schema: { type: integer, default: 10 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPageResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
  /api/v1/orders/{id}/ready:
    put:
      tags: [Orders]
      summary: Mark order as LISTO (generates PIN and publishes event)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '404': { description: Not found }

  /api/v1/orders/{id}/deliver:
    put:
      tags: [Orders]
      summary: Deliver order (validates PIN)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [pin]
              properties:
                pin: { type: string, minLength: 4, maxLength: 6 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '404': { description: Not found }

  /api/v1/orders/{id}/cancel:
    put:
      tags: [Orders]
      summary: Cancel order (only PENDIENTE)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '404': { description: Not found }
  /api/v1/orders/{id}/assign:
    put:
      tags: [Orders]
      summary: Assign yourself to order (EMPLOYEE)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '404': { description: Not found }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorResponse:
      type: object
      properties:
        timestamp: { type: string, format: date-time }
        path: { type: string }
        message: { type: string }
        code: { type: string }
    OrderItemRequest:
      type: object
      required: [dishId, quantity]
      properties:
        dishId: { type: integer, format: int64 }
        quantity: { type: integer, minimum: 1 }
    OrderCreateRequest:
      type: object
      required: [customerId, restaurantId, items]
      properties:
        customerId: { type: integer, format: int64 }
        restaurantId: { type: integer, format: int64 }
        items:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/OrderItemRequest'
    OrderItemResponse:
      type: object
      properties:
        dishId: { type: integer, format: int64 }
        quantity: { type: integer, minimum: 1 }
    OrderResponse:
      type: object
      properties:
        id: { type: integer, format: int64 }
        customerId: { type: integer, format: int64 }
        restaurantId: { type: integer, format: int64 }
        status: { type: string, enum: [PENDIENTE, EN_PREPARACION, LISTO, ENTREGADO, CANCELADO] }
        createdAt: { type: string, format: date-time }
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemResponse'
    OrderPageResponse:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/OrderResponse' }
        page: { type: integer }
        size: { type: integer }
        totalElements: { type: integer, format: int64 }
        totalPages: { type: integer }




